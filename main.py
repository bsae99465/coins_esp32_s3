# main.py - ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Vending/POS)
# ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏ö‡∏≠‡∏™ (Boss) - ‡∏ó‡∏µ‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå API & IOT
# ‡πÉ‡∏ä‡πâ uasyncio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Non-blocking

import time
import asyncio
from machine import Pin, freq
from hardware_config import *

# ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå tm1637.py ‡πÉ‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
try:
    from tm1637 import TM1637
except ImportError:
    print("‚ùå Error: tm1637.py library not found. Display function will be skipped.")
    TM1637 = None

# --- Global State Variables (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö) ---
# ‡πÉ‡∏ä‡πâ volatile ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤ C, ‡πÅ‡∏ï‡πà‡πÉ‡∏ô MicroPython ‡πÉ‡∏ä‡πâ Global/Class
total_credit = 0            # ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ö‡∏≤‡∏ó)
pulse_count_in_ISR = 0      # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏û‡∏±‡∏•‡∏™‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£/‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (Input)
payout_pulse_count_ISR = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏û‡∏±‡∏•‡∏™‡πå‡∏à‡∏≤‡∏Å Coin Hopper (Output Feedback)
target_payout_pulses = 0    # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢
payout_in_progress = False  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
last_displayed_credit = -1  # ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏à‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
system_log = []             # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Log ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

# --- Hardware Initialization ---

# 1. Bill/Coin Acceptor Input (‡πÉ‡∏ä‡πâ PULL_UP ‡πÅ‡∏•‡∏∞ Interrupt)
bill_pin = Pin(BILL_ACCEPTOR_PIN, Pin.IN, Pin.PULL_UP)

# 2. Coin Hopper Payout Feedback Input (‡πÉ‡∏ä‡πâ PULL_UP ‡πÅ‡∏•‡∏∞ Interrupt)
hopper_feedback_pin = Pin(HOPPER_FEEDBACK_PIN, Pin.IN, Pin.PULL_UP)

# 3. Coin Hopper Control Output (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô OFF)
hopper_control_pin = Pin(HOPPER_CONTROL_PIN, Pin.OUT)
hopper_control_pin.value(RELAY_OFF)

# 4. TM1637 Display Initialization
display = None
if TM1637:
    try:
        display = TM1637(clk=Pin(TM1637_CLK_PIN), dio=Pin(TM1637_DIO_PIN))
        display.brightness(2) 
    except Exception as e:
        print(f"‚ùå Failed to initialize TM1637: {e}")
        display = None

# --- Interrupt Service Routines (ISRs) ---

def bill_acceptor_isr(pin):
    """ISR: ‡∏ô‡∏±‡πà‡∏á‡∏ü‡∏±‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏û‡∏±‡∏•‡∏™‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£/‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤"""
    global pulse_count_in_ISR
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (FALLING edge)
    pulse_count_in_ISR += 1

def hopper_feedback_isr(pin):
    """ISR: ‡∏ô‡∏±‡πà‡∏á‡∏ü‡∏±‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏û‡∏±‡∏•‡∏™‡πå‡∏à‡∏≤‡∏Å Coin Hopper ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ"""
    global payout_pulse_count_ISR
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (FALLING edge)
    payout_pulse_count_ISR += 1


# --- Attach Interrupts ---

bill_pin.irq(trigger=Pin.IRQ_FALLING, handler=bill_acceptor_isr)
hopper_feedback_pin.irq(trigger=Pin.IRQ_FALLING, handler=hopper_feedback_isr)


# --- Core Logic Functions (‡πÉ‡∏ä‡πâ uasyncio task) ---

async def handle_bill_credit():
    """Task: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£/‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"""
    global pulse_count_in_ISR
    global total_credit
    global system_log
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏±‡∏•‡∏™‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏ö‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô ISR
    while True:
        await asyncio.sleep_ms(100) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 100ms
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏±‡∏•‡∏™‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ISR ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        pulses = pulse_count_in_ISR 
        pulse_count_in_ISR = 0 
        
        if pulses > 0:
            credit_added = pulses * PULSE_PER_UNIT_VALUE
            total_credit += credit_added
            
            log_msg = f"‚úÖ Credit: +{credit_added} THB. Total: {total_credit} THB"
            system_log.append(log_msg)
            print(log_msg)
            
            # --- API/MQTT Logic (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏≠‡∏™) ---
            # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î Publish ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á MQTT Server
            # self.publish_to_mqtt("credit/update", str(credit_added))
            # ---------------------------------------------------------

async def monitor_payout():
    """Task: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
    global payout_in_progress
    global payout_pulse_count_ISR
    global target_payout_pulses
    global total_credit
    global system_log

    while True:
        await asyncio.sleep_ms(50) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
        
        if not payout_in_progress:
            continue

        # ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏•‡∏™‡πå‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢)
        if payout_pulse_count_ISR >= target_payout_pulses:
            
            # 1. ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå Hopper
            hopper_control_pin.value(RELAY_OFF)
            payout_in_progress = False
            
            # 2. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
            total_credit -= target_payout_pulses # ‡∏´‡∏±‡∏Å‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            
            log_msg = f"‚úÖ Payout Complete! Paid: {target_payout_pulses} coins. Remaining: {total_credit} THB"
            system_log.append(log_msg)
            print(log_msg)
            
            # --- API/MQTT Logic ---
            # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server
            # self.publish_to_mqtt("payout/status", "success")
            # ----------------------
            
        else:
            # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            # print(f"   Paying out... {payout_pulse_count_ISR}/{target_payout_pulses}", end='\r')
            pass # ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û


async def display_manager():
    """Task: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏à‡∏≠ TM1637"""
    global total_credit
    global last_displayed_credit
    
    if not display:
        return

    while True:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        if total_credit != last_displayed_credit:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏´‡∏•‡∏±‡∏Å (9999)
            display_value = min(total_credit, 9999) 
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 
            display.show(display_value) 
            last_displayed_credit = total_credit
            # print(f"üì∫ Display updated: {display_value}")

        await asyncio.sleep_ms(500) # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ


# --- Dummy Test/Command Function ---

def start_payout(amount_to_pay_out):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å MQTT command ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á)"""
    global total_credit
    global payout_in_progress
    global target_payout_pulses
    global payout_pulse_count_ISR
    
    if payout_in_progress:
        print("‚ùå Payout is already in progress.")
        return False

    if amount_to_pay_out > total_credit:
        print("‚ùå Insufficient credit for payout.")
        return False
        
    target_payout_pulses = amount_to_pay_out 
    payout_pulse_count_ISR = 0 
    payout_in_progress = True
    
    print(f"üí∞ Starting payout: {target_payout_pulses} coins...")
    
    # ‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå Hopper (Active Low)
    hopper_control_pin.value(RELAY_ON) 
    
    return True

# --- Main Application Runner ---

async def main_application():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô"""
    
    # 1. Task IOT/MQTT Client (‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏≠‡∏™‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ)
    # asyncio.create_task(mqtt_client_task()) 
    
    # 2. Task ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤
    asyncio.create_task(handle_bill_credit())
    
    # 3. Task ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    asyncio.create_task(monitor_payout())

    # 4. Task ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    if display:
        asyncio.create_task(display_manager())
        display.scroll("INIT")
        await asyncio.sleep(2) # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ Scroll ‡πÄ‡∏™‡∏£‡πá‡∏à
    
    print("System Running: Awaiting Input and MQTT Commands...")

    # --- Dummy Payout Test (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ MQTT) ---
    await asyncio.sleep(5)
    # start_payout(20) # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 20 ‡∏ö‡∏≤‡∏ó ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
    # --------------------------------------------
    
    # Loop ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
    while True:
        await asyncio.sleep(1) 


# --- Start of Program ---
if __name__ == "__main__":
    try:
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà CPU (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
        # freq(240000000) 
        asyncio.run(main_application())
    except KeyboardInterrupt:
        print("\nSystem Halted by User.")
    finally:
        # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        print("Cleaning up hardware...")
        if display:
            display.show("    ") # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏à‡∏≠
        hopper_control_pin.value(RELAY_OFF)
        asyncio.new_event_loop() # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå asyncio loop

